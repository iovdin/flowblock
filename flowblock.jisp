;example usage - do nothing 
(mac e.g. ...values
     `())

(mac new-scope ...body
     `((fn (do ,...body))))

(mac interval time ...body
     `(new-scope
        (= state 
           (setInterval 
             (fn (do ,...body)) ,time)
           )
        (= stop (fn (clearInterval state)))
        ))

(e.g.
  (interval 
    10
    (if (is document.readyState "complete")
      (do 
        (prn "hello world")
        (stop)))))

;checks interval until condition is fulfilled
(mac once condition ...body
     `(interval 10
                (if ,condition
                  (do 
                    (stop) 
                    ,...body))
                ))

(e.g. 
  (once (is document.readyState "complete")
        (prn "hello world")))

(mac watch varname ...body
     `(new-scope
        (= oldvar ,varname)
        (interval 10
                  (if (isnt ,varname oldvar)
                    (do
                      ,...body
                      (= oldvar ,varname)
                      )))
        ))

(mac debounce time ...body
     `(do
        (= this.debounceLastRun (or this.debounceLastRun ((new Date).getTime)))
        (= this.debounceNow ((new Date).getTime))
        (if (and (< (Math.abs (- this.debounceNow this.debounceLastRun)) ,time) (? this.debounceInterval))
          (clearTimeout this.debounceInterval))
        (= this.debounceInterval 
           (setTimeout 
             (fn (do ,...body)) ,time))
        (= this.debounceLastRun this.debounceNow)))

(e.g.
  (debounce 1000
            (prn "hello world")))

(= doc document)

(e.g. 
  (watch variable 
         (prn "do something when variable has changed")))

(def element name ...children
     (do
       (= result (doc.createElement (name.toUpperCase)))
       (for child index children 
            (if (isa child "string" "number")
              (result.appendChild (doc.createTextNode child))
              (elif (instanceof child doc.defaultView.Element) 
                    (result.appendChild child))
              (elif (and (is index 0) (isa child "object"))
                    (attr result child))
              (throw (new Error (+ "unknown element '" name "' with children: " child) ))))
       result))

(e.g.
  (element "p")
  (element "input" (type: "range"))
  (element "p" "hello world")
  (element "p" 
           "hello world" 
           (element "a" (href: "http://wrte.io") "wrte.io")))


(def makeTag tag
     (fn ...params
         (element tag ...params)))

(e.g.
  (= p (makeTag "p")))

(def defTags tags scope
     (for tag tags
          (= (get scope tag) (makeTag tag))))


(e.g.
  (defTags `("html" "body" "head") window))

(defTags ("a abbr address area article aside audio b base bdi bdo big blockquote body br button canvas caption cite code col colgroup data datalist dd del details dfn dialog div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 head header hr i img input ins iframe kbd keygen label legend li link main map mark menu menuitem meta meter nav noscript object ol optgroup option output p param picture pre progress q rp rt ruby s samp script section select small source span strong style sub summary sup table tbody td textarea tfoot th thead time title tr track u ul var video wbr".split " ") window)


(e.g.
  (iframe (head (style "some style")) 
          (body )
          ))

(def findElements selector
     (if (isa selector "string")
       (for el (doc.querySelectorAll selector) el)
       (elif (? selector.appendChild) (list selector))
       (elif (instanceof selector Array) 
             ((list) .concat ...(for el selector (findElements el))))
       (list)))


(e.g.
  (findElements "#content1")
  (findElements (list "#content1" ".class"))
  (is (findElements document.body) (list document.body))
  )


(mac $ selector ...body
     `(for element (findElements ,selector)
           ((fn element (do ,...body)) element)
           ))

(e.g.
  ($ "#content"
     (css element (: "background-color" "#FFFFFF"))))

(mac def$ name ...params body
     `(def ,name selector ,...params 
           ($ selector
              ,body)))

(e.g.
  (def$ css style
        (over value key style 
              (= element.style[key] value)))
  (css ".class" (:backgroundColor "#FF0000")))


(def makePairs array
     (array.reduce 
       (fn prev cur index array
           (do
             (if (is (% index 2) 1)
               (prev.push (list (get array (- index 1)) array[index])))
             prev)) 
       (list)))

(e.g.
  (is (makePairs `(1 2 3 4)) `((1 2) (3 4))))

(= prefixable ("flex flex-direction flex-wrap justify-content align-items flex-grow flex-shrink flex-basis".split " "))


(def cssDeclaration name value prefixed
   (if prefixed
     (if (in name prefixable)
       (+ (cssDeclaration name value) 
          (cssDeclaration (prefix name) value))
       (elif (in value prefixable)
             (+ (cssDeclaration name value) 
                (cssDeclaration name (prefix value))))
       (cssDeclaration name value))
     (+ "  " name ": " value ";\n")))


(def setPrefixedStyle element name value
     (if (in name prefixable)
       (do (= element.style[(dash2camel name)] value)
         (= element.style[(dash2camel (prefix name))] value))
       (elif (in value prefixable)
             (do (= element.style[(dash2camel name)] value)
               (= element.style[(dash2camel name)] (prefix value))))
       (= element.style[(dash2camel name)] value)))

(def getPrefixedStyle element name 
     (if (? element.style)
       (any 
         (get element.style name)
         (get element.style (dash2camel name))
         (get element.style (prefix name))
         (get element.style (dash2camel (prefix name))))
       ))

(def$ css style
      (if (isa style "string")
        (css element (style.split /\s+/))
        (elif (instanceof style Array)
              (for pair (makePairs style)
                   (setPrefixedStyle element pair[0] pair[1])))
        (elif (isa style "object")
              (over value key style 
                    (setPrefixedStyle element key value)))
        ))

(def$ attr params
      (over value key params
            (if (is key "css")
              (css element value)
              (do 
                (= attrNode (doc.createAttribute key))
                (= attrNode.value value)
                (element.setAttributeNode attrNode)))))

(e.g.
  (css element (backgroundColor: "#FF0000"))
  (css element ("display" "flex" 
                "display" "-webkit-flex"))
  (css "#content" "display flex 
       display -webkit-flex")
  )

(def unselectable element
     (css element (: "-webkit-touch-callout" "none"
                     "-webkit-user-select" "none"
                     "-khtml-user-select" "none"
                     "-moz-user-select" "none"
                     "-ms-user-select" "none"
                     "user-select" "none")))

;return function to call to removeEventListener
(def addListener selector event callback
     ((fn 
        (do
          (= elements (findElements selector))
          (= unsubscribe (fn (for element elements
                                  ((get element "removeEventListener") event callback))))
          (for element elements
               ((get element "addEventListener") event callback))
          unsubscribe))))

(e.g.
  (= unsubscribe 
     (addListener "body" "click" 
                  (fn event
                      (prn "onclick")
                      (unsubscribe)
                      )))
  )

(mac on object eventname ...body
     `(new-scope
        (= unsubscribe 
           (addListener ,object ,eventname (fn event (do ,...body))))
        ))

(mac on-once object eventname ...body
     `(new-scope
        (= unsubscribe 
           (addListener ,object ,eventname (fn event (do (unsubscribe) ,...body))))
        ))

(e.g. 
  (on (element "span" "text") "click"
      (prn "clicked" event)
      (unsubscribe))

  (on-once document "mouseup"
           (prn "mouseup"))
  )

(mac oncall object eventname ...body
     `(new-scope
        (= callback (fn event (do ,...body)))
        (= unsubscribe 
           (addListener ,object ,eventname callback))
        (callback ,object)))

(e.g.
  (oncall flexBasis "change"
          (prn flexBasis.val)))

(e.g. 
  (on e "mousedown"
      (= state (:))
      (prn "click")
      (= moveUnsubscribe 
         (on document "mousemove"
             (prn "mousemove")))
      (on-once document "mouseup"
               (moveUnsubscribe)
               (prn "mouseup")
               ))
  )

(e.g.
  (on-drag element 
           (prn "onstartdrag")
           (prn "dragging")
           (prn "more dragging")
           (prn "onenddrag")
           ))


(def noop)

(def stylesheet ...rules 
     (do
       (= sheet
          (if (is doc.styleSheets.length 0)
            (doc.head.appendChild (style "")).sheet
            document.styleSheets[0]))
       (for rule rules
            (sheet.insertRule rule 0)
            )))

(e.g.
  (stylesheet 
    " body, div { 
    background: #EEEEEE;
    border: 1px solid black;
    margin: 5px;
    }
    "))

(mac on-drag element start ...body end
     `(on ,element "mousedown"
          ,start
          (= state (last : (x: event.pageX y: event.pageY) 
                         start: (x: event.pageX y: event.pageY) 
                         dx: 0 dy: 0 
                         tdx: 0 tdy:0))
          (= moveUnsubscribe 
             (on doc "mousemove"
                 (= (state.tdx state.tdy) (list (- state.start.x event.pageX) (- state.start.y event.pageY)))
                 (= (state.dx state.dy) (list (- state.last.x event.pageX) (- state.last.y event.pageY)))
                 (= (state.last.x state.last.y) (list event.pageX event.pageY))
                 ,...body))
          (on-once doc "mouseup"
                   (moveUnsubscribe)
                   ,end
                   )))

(e.g.
  (on-drag element
           (= node (element.childNodes[0]))
           (= choice (interpolateArray state.tdx 10 choices))
           (if (isnt choice node.nodeValue)
             (= node.nodeValue choice))
           (noop)
           ))

(def interpolateArray x step initialValue values
     (do
       (= initialIndex (values.indexOf initialValue))
       ;find postfix of initialValue
       (if (and (< initialIndex 0) 
                (isa initialValue "string") 
                (is (parseFloat initialValue)))
         (do 
           (= prefix (String (parseFloat initialValue)))
           (= postfix (initialValue.substr prefix.length))
           (values.reduce 
             (fn (if  (and (isnt #0) (isa #1 "object") (of "postfix" #1) (is (get #1 "postfix") postfix))
                   (do (= initialIndex #2)
                     #1)
                   )) null)
           ))
       (if (< initialIndex 0)
         (= initialIndex 0))
       (= index (% (+ (Math.floor (/ x step)) initialIndex) values.length))
       (if (< index 0)
         (= index (+ index values.length)))
       (get values index)))

(e.g.
  (is (interpolateArray 0 10  "a" `("a" "b" "c")) "a")
  (is (interpolateArray 0 10  "b" `("a" "b" "c")) "b")
  (is (interpolateArray 12 10 "100px" `("auto" (postfix: "px") "test")) "test")
  )

(def interpolateNumber x step initialValue options
     (do
       (= initialValue 
          (if (isa initialValue "number") 
            initialValue
            (elif (isa initialValue "string") 
                  (parseFloat initialValue))))
       (= choice (+ (any initialValue options.default 0)
                    (* (Math.floor (/ x step)) 
                       (any options.step 1))))
       (if (? options.min)
         (= choice (Math.max choice options.min)))
       (if (? options.max)
         (= choice (Math.min choice options.max)))
       choice))

(e.g.
  (is (interpolateNumber -10 4 1 (min: 0)) 0)
  (is (interpolateNumber 1000 4 1 (max: 100)))
  (is (interpolateNumber 0 4 undefined (default: 5)) 5))


(def dispatch object eventname
     (object.dispatchEvent 
       (new object.ownerDocument.defaultView.Event eventname (bubbles: true))))
(e.g.
 (dispatch object eventname))

(def inputNumber attrs 
     (do
       (= el (span attrs (any attrs.value attrs.default attrs.min "")))
       (css el (: cursor "ew-resize"
                  "border-bottom" "1px solid #46f"))
       (unselectable el)
       (= el.val el.textContent)
       (on-drag el
                (do (= node el.childNodes[0])
                  (= initialValue node.nodeValue))
                (= choice (interpolateNumber -state.tdx 4 initialValue attrs))
                (if (isnt choice el.nodeValue)
                  (do (= node.nodeValue choice)
                    (= el.val choice)
                    (el.dispatchEvent 
                      (new el.ownerDocument.defaultView.Event "change" (bubbles: true)))))
                (noop))
       el
       ))

(e.g.
  (inputNumber (id : "flex-basis" min:0 max: 100)))

(def dropdown ...children
     (do
       (= index 0)
       (= attrs (:))
       (if (and (isa children[0] "object") (?! children[0].appendChid))
         (do (= attrs children[0])
           (= children (children.slice 1))))

       (= wrappedChildren (for child children
                               (if (isa child "string" "number")
                                 (div (css: (border: "1px solid light-grey"
                                                     padding: "1px")) child)
                                 child
                                 )))

       (if (and (isnt attrs.selected -1) (isnt (children.indexOf attrs.selected) -1))
         (= index (children.indexOf attrs.selected)))

       (= opened (div (css: (display: "none" position: "absolute" background: "#FFF")) ...wrappedChildren))
       (= closed (span (get children index)))
       (= el (span (extend attrs (css: (display: "inline-block" cursor: "default"))) closed opened))
       (= el.val closed.textContent)

       (on document "click"
           (if (and (is (getSpecifiedStyle opened "display") "none")
                    (closed.contains event.target))
             (do (css opened "display block")
               (= lastChoice null)
               (= initialChoice el.val)
               (= moveUnsubscribe 
                  (on document "mousemove"
                      (if (and (opened.contains event.target) (isnt lastChoice event.target))
                        (do 
                          (= newChoice event.target)
                          (css newChoice "background-color lightgray")
                          (if lastChoice
                            (css lastChoice "background-color white"))
                          (= el.val newChoice.textContent)
                          (dispatch el "change")
                          (= lastChoice newChoice)))
                      ))
               (on-once document "click"
                        (if lastChoice
                          (css lastChoice "background-color white"))
                        (if (not (opened.contains event.target))
                          (do 
                            (= el.val initialChoice)
                            (dispatch el "change")))
                        (moveUnsubscribe))
               )
             (css opened "display none")))

       (on opened "click"
           (renderTo closed (span event.target.textContent))
           (= el.val closed.textContent)
           (dispatch el "change"))
       el))

(e.g. 
  (dropdown (id: "mydropdown" selection: "auto" ) "auto" "100%" "100vh"))


(def getComputedStyle element name
     (do
       (if (isa element "string")
         (= element (doc.querySelector element) ))
       (if (? element.ownerDocument.defaultView.getComputedStyle)
        (if (= st (element.ownerDocument.defaultView.getComputedStyle element null))
          (any 
            (st.getPropertyValue name)
            (st.getPropertyValue (dash2camel name))
            (st.getPropertyValue (prefix name))
            (st.getPropertyValue (dash2camel (prefix name)))
            )))))

(e.g.
  (getComputedStyle "#content" "display"))


(def getSpecifiedStyle element name
     (do
       (if (isa element "string")
         (= element (doc.querySelector element) ))
       (getPrefixedStyle element name)))

(e.g.
  (getSpecifiedStyle element "display")
  (getSpecifiedStyle "#content" "flex" "-webkit-flex")
  )

(def getStyle element name
     (any (getSpecifiedStyle element name) (getComputedStyle element name)))

(e.g.
  (getStyle element "display")
  (getStyle "#content" "display")
  )

(def prefix value
     (+ "-webkit-" value))

(def deprefix value
     (if (and (isa value "string") (is (value.indexOf "-webkit-") 0))
       (value.substr 8)
       value))

(def dash2camel value
     (value.replace 
       /(-\w)/g
       (fn match 
           (match[1].toUpperCase))))

(e.g.
  (is (deprefix "-webkit-flex") "flex")
  (is (prefix "flex") "-webkit-flex")
  (is (dash2camel "-webkit-flex") "WebkitFlex")
  (is (dash2camel "background-color") "backgroundColor")
  )

(def$ renderTo ...elements
      (do
        (for child element.childNodes
             (element.removeChild child))
        (for e elements
             (if (isa e "string")
               (element.appendChild (doc.createTextNode e))
               (element.appendChild e)))))

(e.g.
  (renderTo "#content" (element "p" "hello world")))


(def extend object properties
     (do
       (= result (:))
       (over value key properties
             (= result[key] value))
       (over value key object
             (= result[key] value))
       result))

(e.g. 
  (is (extend (a: 1) (b: 2)) (a: 1 b: 2)))

(def editableProperty name ...children 
     (do
       (= keyElement (span name))
       (= valueElement (span ...children))
       (= result (li (: "id" ,name) keyElement ": " valueElement))
       (unselectable result)
       (= result.property name)
       (= result.val ((for child children child.val).join ""))

       (on valueElement "change"
           (event.stopImmediatePropagation)
           (= result.val ((for child children (any child.val child.textContent)).join ""))
           (result.dispatchEvent 
             (new result.ownerDocument.defaultView.Event "propertyChange" (bubbles: true))))
       result))


(e.g. 
  (editableProperty "flex-direction" (dropdown "row" "row-reverse" "column" "column-reverse"))
  (do
    (renderTo "body" (editableProperty "display" (dropdown "flex" "block" "inline" "none")))
    (on doc "propertyChange"
        (prn event.target.property event.target.val)))

  (editableProperty "flex-grow" (inputNumber (min: 0 step: 1 default: 1)) "px")

  (editableProperty "flex-basis" 
                (inputNumber (min: 0 step: 1 default: 1)) 
                (dropdown "auto % px mm cm in pt pc em ex ch rem vh vw vmin vmax")))

(def selector target
     (if (isa target "string")
       target
       (elif (? target.attributes.id) (+ "#" target.id))
       (elif (? target.tagName) (target.tagName.toLowerCase))
       "unknown"
       ))

(def flexEditor target
     (do
       (= props (:))
       (= html 
          (code 
            (span (selector target)) " {"
            (ul (style: "list-style-type: none;") 
                (defncall dropProp "display" `("block" "flex" "none" "inline")
                          (= (get props #0) 
                             (editableProperty #0 (dropdown 
                                                    (selected: (deprefix (getStyle target #0))) 
                                                    ...#1 ))))
                (dropProp "flex-direction" `("row" "column" "column-reverse" "row-reverse"))
                (dropProp "flex-wrap" `("wrap" "nowrap" "wrap-reverse"))
                (dropProp "justify-content" `("flex-start" "flex-end" "center" "space-between" "space-around"))
                (dropProp "align-items" `("flex-start" "flex-end" "center" "baseline" "stretch"))
                (br)
                (editableProperty "flex-grow" (inputNumber (min: 0 default: 0 step : 1 value: (getStyle target "flex-grow"))))
                (editableProperty "flex-shrink" (inputNumber (min: 0 default: 1 step : 1 value: (getStyle target "flex-shrink"))))
                (= flexBasis 
                   (editableProperty "flex-basis" 
                                     (= inputFlexBasis (inputNumber (min: 0 step: 1 default: 1)))
                                     (dropdown ...("auto % px mm cm in pt pc em ex ch rem vh vw vmin vmax".split " "))))
                )
            "}"
            ))
       (= containerProps (list props["flex-direction"] props["flex-wrap"] props["justify-content"] props["align-items"]))

       (oncall flexBasis "propertyChange"
               (if (isnt (flexBasis.val.indexOf "auto") -1)
                 (do (css inputFlexBasis "display none")
                   (= flexBasis.val "auto"))
                 (css inputFlexBasis "display inline")))

       (on html "propertyChange"
           (= property event.target.property)
           (= value event.target.val)
           (if (is property "display")
             (css containerProps 
                  (visibility: (if (is value "flex")  "visible" "hidden"))))

           (css target (:: (list property value))))
       html
       ))

(def flexProperties element 
     (:: (for propName `("display" "flex-direction" "flex-wrap" "justify-content" "align-items" "flex-grow" "flex-shrink" "flex-basis")
              (list propName (deprefix (getStyle element propName))))))

(e.g.
 (is (flexProperties frame.body) 
     (: display "flex" "flex-direction" "row"))
 )


(def cssFlexRule selector properties prefixed
     (+ selector " {\n" 
        (+
          "\n  /* container properties */\n\n"
          (cssDeclaration "display" (any properties.display "block") prefixed) "\n"
          (if (is properties.display "flex") 
            ((for containerProp `("flex-direction" "flex-wrap" "justify-content" "align-items") 
                  (if (? properties[containerProp])
                    (+ (cssDeclaration containerProp properties[containerProp] prefixed) (if prefixed "\n" "")))
                  ).join "")
            ""
            )
          "\n  /* item properties */\n\n"
          ((for itemProp `("flex-grow" "flex-shrink" "flex-basis") 
                (if (? properties[itemProp])
                  (+ (cssDeclaration itemProp properties[itemProp] prefixed) (if prefixed "\n" "")))
                ).join "")
          )
        "}")
     )

(def sassFlexRule selector properties prefixed
     (+ selector " {\n" 
        (+
          (if (is properties.display "flex") 
            ((list 
              (defncall sassInclude "flexbox" (+ "  @include " #0 
                                                      (if #1 (+ "(" #1 ")") "") ";\n"))
                   ...(for containerProp `("flex-direction" "flex-wrap" "justify-content" "align-items")
                           (if (? properties[containerProp])
                             (sassInclude containerProp properties[containerProp])
                             ) 
                           )).join "")
            "")
          "\n"
          ((for itemProp `("flex-grow" "flex-shrink" "flex-basis") 
                (if (? properties[itemProp])
                  (sassInclude itemProp properties[itemProp] ))
                ).join "")
          )
        "}")
     )

(def content id 
     (div (id: id) "#" id))

(def pageDefaults body
     (renderTo body 
               (content "content1") 
               (content "content2")))

(mac do-recur ...params body
     `(new-scope
        (= recur (fn ,body))
        (recur ,...params)))

(e.g.
 (do-recur `(1 2 3 (4 5 (6 7)))
           (for item #0
                (if (? item.length)
                  (recur item)
                  (prn item)))))

(e.g.
  (form 
    (do-with mylabel (text: "preview" checked: true) 
             (label (input (type: "radio" name: "tab" value: text checked: checked)) text))
    (mylabel "html" false)
    (label (input (type: "radio" name: "tab" value: "html")) "html")
    (label (input (type: "radio" name: "tab" value: "css")) "css")
    ))

(mac defncall name ...params body
     `(do 
        (def ,name ,body)
        (,name ,...params)))

(e.g.
  (defncall hotkey "new" "n" (span (button (id: (+ "btn_" #0) ) #0 ) (+ "'" #1 "'") (br)))
  (hotkey "cut" "d")
  (hotkey "copy" "y")
  (hotkey "paste" "p"))



(;once (is doc.readyState "complete")
      (renderTo "body" (= el (editableProperty "flex-grow" (min: 0 default: 0 step : 1 value: (getStyle doc.body "flex-grow")))))
      (on doc "propertyChange" 
          (prn "change" event.target.val)))

(once (is doc.readyState "complete")
      (renderTo "body" 
                (div (id: "editor")
                     (br) 
                     (div (id: "flex-properties"))

                     (defncall hotkey "new" "n" 
                               (span (button (id: (+ "btn_" #0) ) #0 ) " - '" #1 "' on keyboard" (br)))
                     (hotkey "cut" "d"))
                (form 
                  (defncall viewRadio "preview" true
                            (label (input (:: 
                                            `("type" "radio") 
                                            `("name" "tab") 
                                            (list "value" #0) 
                                            (if #1 (list "checked" #1) (list)))) #0))
                  (viewRadio "html")
                  (viewRadio "css")
                  (viewRadio "sass")
                  )
                (iframe (id: "preview" class: "content"))
                (defncall sourcearea "html"
                 (textarea (id: #0 class: "content" style: "display: none" readonly: true spellcheck: false)))
                (sourcearea "css")
                (sourcearea "sass"))

      (css "#editor" "position fixed top 10px right 10px width 300px background-color #EEEEEE")
      (css ".content" "width 600px height 400px")
      (css "textarea" "font-family monospace")

      (css doc.documentElement "min-width 100% display flex")
      (css doc.body "height 100% display flex flex-direction column justify-content center align-items center flex-grow 1")
      (= frame (document.getElementById "preview").contentDocument)

      (def newId
           (do (= freePostfix 1)
             (while (is (frame.getElementById (+ "content" freePostfix))) freePostfix++)
             (+ "content" freePostfix)))


      (= doc frame)
      (css frame.documentElement "min-width 100% display flex")

      (try
        (if (= data (localStorage.getItem "data"))
          (= frame.body.innerHTML data)
          (pageDefaults frame.body))
        (catch e
               (do (prn "error loading data" e)
                 (pageDefaults frame.body))
               ))


      (css "div" (border: "1px solid black"))
      (css doc.body "display flex justify-content center align-items center flex-grow 1")
      (css doc.body "height 100% background-color #EEEEEE")

      (stylesheet "body, div { background: #EEEEEE; border: 1px solid black; margin: 5px; }")

      (= doc document)
      (= target null)
      (defncall 
        saveChanges
        (do
          (= doc frame)
          (localStorage.setItem "data" frame.body.innerHTML)
          (= props (html: (: "min-width" "100%" "display" "flex")
                          body: (flexProperties frame.body)))

          ($ "div" 
             (= props[(selector element)] (flexProperties element)))

          (= doc document)
          ($ "#css" (= element.value ((over value name props (cssFlexRule name value true)).join "\n")))

          ($ "#sass" (= element.value ((list 
                                         "//import this plugin\n//https://github.com/mastastealth/sass-flex-mixin/blob/master/_flexbox.scss\n"
                                         ...(over value name props (sassFlexRule name value ))).join "\n")))
          ($ "#html" (= element.value 
                        (+ "<body>\n"
                           (do-recur frame.body.children "  "
                                     ((for child #0
                                           (+ #1 "<" (child.tagName.toLowerCase) " id='" child.id"'>\n" 
                                              (recur child.children (+ #1 "  "))
                                              #1 "</" (child.tagName.toLowerCase) ">\n")
                                           ).join ""))

                           "</body>")))
          ))

      (defncall retab frame.body 0
                (do 
                  ;TODO fix tabIndex is 2 * tabIndex
                  (= tabIndex (any #1 0))
                  (attr #0 (tabindex: tabIndex))
                  tabIndex++
                  (for child #0.children
                       (= tabIndex (retab child tabIndex)))
                  tabIndex))

      (def addBlock 
           (do 
             (target.appendChild (content (newId)))
             (retab frame.body 0)))

      (def removeBlock
           (if (isnt target frame.body)
             (do
               (= newTarget (any 
                              target.previousElementSibling 
                              target.nextElementSibling 
                              target.parentElement))
               (target.parentElement.removeChild target)
               (if newTarget
                 (= target newTarget))
               (retab frame.body)
               )))

      (on frame.body "keypress"
          (switch (String.fromCharCode event.charCode)
                  (case "n" (addBlock))
                  (case "d" (removeBlock))
                  (prn event))
          (saveChanges)
          )


      (on "#btn_new" "click" 
                 (addBlock)
                 (saveChanges))
      (on "#btn_remove" "click" 
                 (removeBlock)
                 (saveChanges))

      (on document "propertyChange"
          (if (and 
                (is event.target.property "display") 
                (is event.target.val "flex") 
                (is target.childElementCount 0))
            (do 
              (addBlock)
              (addBlock)))
          (saveChanges))

      (on "input[type=radio]" "click"
          (css ".content" "display none") 
          (css (+ "#" event.target.value) "display flex"))


      (on frame.body "focusin"
          (= target event.target))

      (watch target
             (if oldvar
               (css oldvar (border: "1px solid black")))
             (css target (border: "2px solid tomato"))
             (renderTo 
               "#flex-properties" (flexEditor target)))

      (= target frame.body)
      (frame.body.focus))

(e.g.
  (deploy "flowblock")
  (branch "test"))
